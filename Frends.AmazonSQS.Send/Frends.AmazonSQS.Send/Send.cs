using Amazon;
using Amazon.Runtime;
using Amazon.SQS;
using Amazon.SQS.Model;
using Frends.AmazonSQS.Send.Definitions;
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.AmazonSQS.Send;

/// <summary>
/// Amazon S3 Task.
/// </summary>
public class AmazonSQS
{
    /// <summary>
    /// Frends Task for sending messages to AmazonSQS.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AmazonSQS.Send)
    /// </summary>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="input">Input parameters.</param>
    /// <param name="options">Optional parameters.</param>
    /// <param name="cancellationToken">Token generated by frends to stop this Task.</param>
    /// <returns>Object { bool Success, string MessageId, string HttpStatus, long ContentLength, dynamic ErrorMessage }</returns>
    public static async Task<Result> Send([PropertyTab] Connection connection, [PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            using var sqsClient = GetAmazonSQSClient(connection.UseDefaultCredentials, ConstructAWSCredentials(connection), connection.Region);

            var request = new SendMessageRequest
            {
                MessageBody = input.Message,
                QueueUrl = input.QueueUrl,
            };

            if (options.DelaySeconds >= 0)
                request.DelaySeconds = options.DelaySeconds;

            var response = await sqsClient.SendMessageAsync(request, cancellationToken);
            return new Result(true, response.MessageId, response.HttpStatusCode.ToString(), response.ContentLength, null);
        }
        catch (Exception ex)
        {
            if (options.ThrowExceptionOnError)
                throw;
            return new Result(false, null, null, 0, ex);
        }
    }

    internal static AmazonSQSClient GetAmazonSQSClient(bool useDefaultCredentials, AWSCredentials awsCredentials, Regions region)
    {
        // App.config or EC2 instance credentials?
        if (useDefaultCredentials)
        {
            if (region is Regions.Undefined)
                return new AmazonSQSClient();
            else
                return new AmazonSQSClient(RegionSelection(region));
        }

        if (region is Regions.Undefined)
            return new AmazonSQSClient(awsCredentials);
        else
            return new AmazonSQSClient(awsCredentials, RegionSelection(region));
    }

    private static dynamic ConstructAWSCredentials(Connection connection)
    {
        if (connection.UseDefaultCredentials)
            return null;

        return connection.CredentialsType switch
        {
            AWSCredentialsTypes.BasicAWSCredentials => new BasicAWSCredentials(connection.AccessKey, connection.SecretKey),
            AWSCredentialsTypes.AnonymousAWSCredentials => new AnonymousAWSCredentials(),
            AWSCredentialsTypes.EnvironmentAWSCredentials => new EnvironmentVariablesAWSCredentials(),
            AWSCredentialsTypes.SessionAWSCredentials => new SessionAWSCredentials(connection.AccessKey, connection.SecretKey, connection.SessionToken),
            _ => throw new InvalidEnumArgumentException("Unknown credentials type."),
        };
    }

    [ExcludeFromCodeCoverage(Justification = "Excluded from code coverage because only single region can be used with test system.")]
    private static RegionEndpoint RegionSelection(Regions region)
    {
        return region switch
        {
            Regions.EuNorth1 => RegionEndpoint.EUNorth1,
            Regions.EuWest1 => RegionEndpoint.EUWest1,
            Regions.EuWest2 => RegionEndpoint.EUWest2,
            Regions.EuWest3 => RegionEndpoint.EUWest3,
            Regions.EuCentral1 => RegionEndpoint.EUCentral1,
            Regions.ApSoutheast1 => RegionEndpoint.APSoutheast1,
            Regions.ApSoutheast2 => RegionEndpoint.APSoutheast2,
            Regions.ApNortheast1 => RegionEndpoint.APNortheast1,
            Regions.ApNortheast2 => RegionEndpoint.APNortheast2,
            Regions.ApSouth1 => RegionEndpoint.APSouth1,
            Regions.CaCentral1 => RegionEndpoint.CACentral1,
            Regions.CnNorth1 => RegionEndpoint.CNNorth1,
            Regions.CnNorthWest1 => RegionEndpoint.CNNorthWest1,
            Regions.SaEast1 => RegionEndpoint.SAEast1,
            Regions.UsEast1 => RegionEndpoint.USEast1,
            Regions.UsEast2 => RegionEndpoint.USEast2,
            Regions.UsWest1 => RegionEndpoint.USWest1,
            Regions.UsWest2 => RegionEndpoint.USWest2,
            _ => RegionEndpoint.EUNorth1,
        };
    }
}